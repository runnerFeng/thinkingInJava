/**
 * @author jinx
 * @date 2018/5/4 11:39
 * Desc:复用代码是java众多引人注目的功能之一。但要想成为极具革命性的语言，仅仅能够复制代码并对之加以改变是不够的，它还必须能够做更多的事情。
 *      1.调用基类构造器必须是你在导出类构造器中做的第一件事。
 *      2.使用代理时可以拥有更多的控制力，因为我们可以选择只提供在成员对象中的方法的某个子集。
 *      3.虽然编译器强制你去初始化基类，并且要求你在构造器起始处就要这么做，但他并不监督你必须将成员对象也初始化，因此这一点上你必须时刻注意。
 *      4.除了内存以外，不能依赖垃圾回收器去做任何事情。如果需要进行清理，最好是编写你自己的清理方法，但不要使用finalize()。
 *      5.到底是使用组合还是继承，一个最清晰的判断办法就是问一问自己是否需要从新类向基类进行向上转型。如果必须向上转型，则继承是必要的；但如果不需要，则应当好好考虑自己
 *        是否需要继承。
 *      6.使用final关键字出于两种理由：设计或者效率。
 *      7.1将非基本类型参数申明为final表示无法在方法中改变参数引用所指向的对象--即只能修改其值但是不能new--改变其引用。
 *      7.2将基本类型参数申明为final表示只能使用该值，但是不能修改该值，这一特性主要用来向匿名内部类中传递数据。
 *      8.final类中的域可以根据个人意愿选择是或者不是final,不论类是否被定义为final,相同的规则都适用于定义为final的域。然而由于final类禁止继承，所以final类中的方法都
 *        隐式的指定为final的。
 *      9.这是对粗糙的设计和代码的又一次讽刺。
 *      10.一般来说，可以说：“类的代码在初次使用时才加载。”这通常是指加载发生于创建类的第一个对象之时，但是当访问static域或static方法时，也会发生加载。当然
 *         定义为static的东西只会初始化一次。
 *      11.尽管面向对象编程对继承极力强调，但在开始一个设计时，一般应优先选择组合，只在确实必要时才使用继承。因为组合更具灵活性。此外，通过对成员类型使用继承技术的太添加技巧，
 *         可以在运行时改变那些成员对象的类型和行为。因此，可以在运行时改变组合而成的对象的行为。
 *      12.如果将一个项目视作是一个有机的，进化着的生命体而去培养，而不是打算像盖摩天大楼一样快速见效，就会获得更多的成功和更迅速的反馈。
 */
package com.feng.chapter7;